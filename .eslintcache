[{"/Users/devanshjatinponda/Desktop/Projects/GTEM-Hackathon/frontend/src/App.js":"1","/Users/devanshjatinponda/Desktop/Projects/GTEM-Hackathon/frontend/src/components/ClassSeatPicker.js":"2","/Users/devanshjatinponda/Desktop/Projects/GTEM-Hackathon/frontend/src/components/Covid.js":"3","/Users/devanshjatinponda/Desktop/Projects/GTEM-Hackathon/frontend/src/components/CreateClass.js":"4","/Users/devanshjatinponda/Desktop/Projects/GTEM-Hackathon/frontend/src/components/Login.js":"5","/Users/devanshjatinponda/Desktop/Projects/GTEM-Hackathon/frontend/src/components/DashboardStudent.js":"6"},{"size":2057,"mtime":1611456513775,"results":"7","hashOfConfig":"8"},{"size":4869,"mtime":1611458112934,"results":"9","hashOfConfig":"8"},{"size":3114,"mtime":1611456192937,"results":"10","hashOfConfig":"8"},{"size":7314,"mtime":1611456192965,"results":"11","hashOfConfig":"8"},{"size":3547,"mtime":1611456192938,"results":"12","hashOfConfig":"8"},{"size":2428,"mtime":1611458541591,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},"11ir1dz",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/devanshjatinponda/Desktop/Projects/GTEM-Hackathon/frontend/src/App.js",["30","31","32"],"import logo from './logo.svg';\nimport './App.css';\nimport ClassSeatPicker from './components/ClassSeatPicker';\nimport Login from './components/Login';\nimport Covid from './components/Covid';\nimport SignUp from './components/SignUp';\nimport Main from './components/Main';\nimport CreateClass from './components/CreateClass';\nimport DashboardProf from './components/DashboardProf';\n\nimport DashboardStudent from './components/DashboardStudent';\nimport SignUpProf from './components/SignUpProf';\nimport { Router, Route, browserHistory } from 'react-router';\nimport { Component } from 'react';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      userInfo: {}\n    }\n  }\n\n  updateUserInfo = (userInfo) => {\n    this.setState({\n      userInfo: userInfo\n    });\n    console.log(\"Updated:\")\n    console.log(this.state.userInfo);\n  }\n\n  render() {\n    const userInfo = this.state.userInfo;\n    return (\n      <div className=\"App\">\n        <Router history={browserHistory}>\n          <Route path='/' component={() => <Main />} />\n          <Route path='/main-page' component={() => <Main userInfo={this.state.userInfo} />} />\n            \n          <Route path='/sign-up' component={() => <SignUp userInfo={this.state.userInfo} />} />\n          \n          <Route path='/login' component={() => <Login updateUserInfo={this.updateUserInfo} />} />\n          \n          <Route path='/create-class' component={() => <CreateClass updateUserInfo={this.updateUserInfo} userInfo={this.state.userInfo} />}  />\n\n          <Route path='/pick-seat' component={() => <ClassSeatPicker userInfo={this.state.userInfo} />}  />\n\n          <Route path='/dashboard-student' component={() => <DashboardStudent userInfo={this.state.userInfo} />} />\n\n          <Route path='/dashboard-professor' component={() => <DashboardProf userInfo={this.state.userInfo} />} />\n          \n          <Route path='/covid' component={() => <Covid userInfo={this.state.userInfo} />} />\n          \n        </Router>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","/Users/devanshjatinponda/Desktop/Projects/GTEM-Hackathon/frontend/src/components/ClassSeatPicker.js",["33"],"import React, { Component } from 'react';\nimport SeatPicker from 'react-seat-picker';\nimport { Container, Row, Col, Button } from 'react-bootstrap';\nimport logo from './logo.png';\n\nclass ClassSeatPicker extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            rows: [],\n            loading: true,\n            selectedSeatId: ''\n        }\n    }\n\n    componentWillMount = async () => {\n        let location = 'College of Computing-305'\n        let URL = 'http://localhost:5000/rooms/get-current-configuration/' + location;\n        let headers = new Headers();\n        headers.append(\"Access-Control-Allow-Origin\", \"*\");\n        headers.append(\"Access-Control-Allow-Headers\", \"*\");\n        headers.append(\"Content-Type\", \"application/json\");\n        \n        let apiResponse = null;\n        await fetch(URL, {\n            method: 'GET',\n            headers: headers\n        })\n        .then(data => data.json())\n        .then(data => apiResponse = data)\n        .catch(err => console.log(err));\n        console.log(apiResponse);\n        if (apiResponse === null) {\n            return;\n        }\n        this.setState({\n            rows: apiResponse['seats'],\n            loading: false\n        })\n    }\n\n    addSeatCallback = ({ row, number, id }, addCb) => {\n        this.setState({\n          loading: true\n        }, async () => {\n          await new Promise(resolve => setTimeout(resolve, 1500))\n          console.log(`Added seat ${number}, row ${row}, id ${id}`)\n          addCb(row, number, id, 'Selected')\n          this.setState({ loading: false, selectedSeatId: id })\n        })\n      }\n\n    removeSeatCallback = ({ row, number, id }, removeCb) => {\n        this.setState({\n            loading: true\n        }, async () => {\n            await new Promise(resolve => setTimeout(resolve, 1500))\n            console.log(`Removed seat ${number}, row ${row}, id ${id}`)\n            // A value of null will reset the tooltip to the original while '' will hide the tooltip\n            const newTooltip = ['A', 'B', 'C'].includes(row) ? null : ''\n            removeCb(row, number, newTooltip)\n            this.setState({ loading: false, selectedSeatId: '' })\n        })\n    }\n\n    chooseSeat = async () => {\n        const chosen = this.state.selectedSeatId;\n        let URL = 'http://localhost:5000/rooms/choose-seat';\n        var headers = new Headers();\n        headers.append(\"Access-Control-Allow-Origin\", \"*\");\n        headers.append(\"Access-Control-Allow-Headers\", \"*\");\n        headers.append(\"Content-Type\", \"application/json\");\n\n        let body = {\n            'room_id': 'College of Computing-305',\n            'seat_id': chosen,\n            'email': 's@gatech.edu'\n        }\n\n        let apiResponse = null;\n        await fetch(URL, {\n            method: 'POST',\n            headers: headers,\n            body: JSON.stringify(body)\n        })\n        .then(data => data.json())\n        .then(data => apiResponse = data)\n        .catch(err => console.log(err));\n        console.log(apiResponse);\n\n        alert('Your seat has been booked! Please arrive at 12:20 PM :)')\n    }\n\n    render() {\n        const loading = this.state.loading\n        return (\n            <div>\n                <div className=\"sidenav\">\n                    <img src={logo} alt=\"Logo\" className =\"logo\" />\n                    <h2>John Doe</h2>\n                    <a href=\"#dashboard\">Dashboard</a>\n                    <a href=\"#class1\">CS 4641</a>\n                    <a href=\"#class2\">MATH 3012</a>\n                    <a href=\"#class3\">CS 4660</a>\n                    <a className=\"addClass\">+</a>\n                </div>\n                <Container>\n                    <Row>\n                        <Col className='seat-title'>\n                            <h2>CS-4641</h2>\n                        </Col>\n                    </Row>\n                </Container>\n                <div className='my-seat'>\n                <SeatPicker\n                    className='seat-picker'\n                    addSeatCallback={this.addSeatCallback}\n                    removeSeatCallback={this.removeSeatCallback}\n                    maxReservableSeats={1}\n                    alpha\n                    visible\n                    rows={this.state.rows}\n                    selectedByDefault\n                    loading={loading}\n                    tooltipProps={{multiline: true}}\n                />\n                </div>\n                <Container>\n                    <Row>\n                        <Col className='seat-title' >\n                            <Button onClick={this.chooseSeat} className='buttonCovid'>\n                                Confirm\n                            </Button>\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default ClassSeatPicker;","/Users/devanshjatinponda/Desktop/Projects/GTEM-Hackathon/frontend/src/components/Covid.js",[],"/Users/devanshjatinponda/Desktop/Projects/GTEM-Hackathon/frontend/src/components/CreateClass.js",["34","35"],"import React, { Component } from 'react';\nimport { Container, Form, Row, Col, Button } from 'react-bootstrap';\n\nimport { browserHistory } from 'react-router';\n\nimport logo from './logo.png';\n\n\nclass CreateClass extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            courseID: '',\n            building: '',\n            room: '',\n            rows: 0,\n            columns: 0\n        }\n    }\n\n    addClass = async () => {\n        const building = this.state.building;\n        const room = this.state.room;\n        const courseID = this.state.courseID;\n        \n        if (!(building && room)) {\n            return;\n        }\n\n        // make API call to get rows and cols\n        var myHeaders = new Headers();\n        myHeaders.append(\"Content-Type\", \"application/json\");\n        const URL = 'http://localhost:5000/rooms/add-class';\n        let headers = new Headers();\n        headers.append('Access-Control-Allow-Origin', '*');\n        headers.append('Content-Type', 'application/json');\n        headers.append(\"Access-Control-Allow-Headers\", \"*\");\n        let body = {\n            courseID: courseID,\n            roomID: building + '-' + room,\n            timing: '08:00:00',\n            email: this.props.userInfo.email\n        }\n        let options = {\n            method: 'POST',\n            headers: headers,\n            redirect: 'follow',\n            body: JSON.stringify(body)\n        }\n\n        let apiResponse = null;\n        await fetch(URL, options)\n        .then(data => data.json())\n        .then(data => apiResponse = data)\n        .catch(err => console.log(err));\n\n        console.log(apiResponse);\n        alert('Class added at ' + building + ' ' + room + '!');\n        let userInfo = this.props.userInfo;\n        let classes = userInfo['classes'];\n        await classes.push([courseID]);\n        userInfo['classes'] = classes;\n        await this.props.updateUserInfo({\n            userInfo: userInfo\n        })\n        browserHistory.push('/dashboard-professor');\n    }\n\n    updateRowsCols = async () => {\n        const building = this.state.building;\n        const room = this.state.room;\n        console.log(building, room);\n        if (!(building && room)) {\n            return;\n        }\n\n        // make API call to get rows and cols\n        const URL = 'http://localhost:5000/rooms/dimension/' + building + '-' + room;\n        let headers = new Headers();\n        headers.append('Access-Control-Allow-Origin', '*');\n        headers.append('Content-Type', 'application/json');\n        headers.append(\"Access-Control-Allow-Headers\", \"*\");\n        let options = {\n            method: 'GET',\n            headers: headers\n        }\n\n        let apiResponse = null;\n        await fetch(URL, options)\n        .then(data => data.json())\n        .then(data => apiResponse = data)\n        .catch(err => console.log(err));\n\n        console.log(apiResponse);\n        if (apiResponse === null) {\n            return;\n        }\n\n        const length = apiResponse['length'];\n        const breadth = apiResponse['breadth'];\n\n        this.setState({\n            length: length,\n            breadth: breadth\n        });\n    }\n\n    onCourseIDChange = (e) => {\n        const courseID = e.target.value;\n        this.setState({\n            courseID: courseID\n        });\n    }\n\n    onBuildingChange = async (e) => {\n        const building = e.currentTarget.value;\n        await this.setState({\n            building: building\n        });\n        await this.updateRowsCols();\n    }\n\n    onRoomChange = async (e) => {\n        const room = e.currentTarget.value;\n        await this.setState({\n            room: room\n        });\n        await this.updateRowsCols();\n    }\n\n    onRowsChange = (e) => {\n        const rows = e.target.value;\n        this.setState({\n            rows: rows\n        });\n    }\n\n    onColsChange = (e) => {\n        const cols = e.target.value;\n        this.setState({\n            cols: cols\n        });\n    }\n\n    render() {\n        return (\n            <div class=\"create-class\">\n            <Container>\n            <div className=\"sidenav\">\n                    <img src={logo} alt=\"Logo\" className =\"logo\" />\n                    <h2>John Doe</h2>\n                    <a href=\"#dashboard\">Dashboard</a>\n                    <a href=\"#class1\">CS 1101 - A</a>\n                    <a href=\"#class2\">CS 1101 - B</a>\n                    <a href=\"#class3\">CS 1102 - A</a>\n                    <a className=\"addClass\">+</a>\n                </div>\n                \n\n                <Form>\n                    <Form.Group controlId=\"formBasicEmail\">\n                        <Form.Label className=\"label1\">Course ID: *</Form.Label>\n                        <Form.Control onChange={this.onCourseIDChange} type=\"text\" placeholder=\"Course ID (ex. CS 101)\" />\n                    </Form.Group>\n                    <Form.Row>\n                        <Col>\n                            <Form.Group controlId=\"exampleForm.ControlSelect1\">\n                                <Form.Label className=\"label1\">Select Building: *</Form.Label>\n                                <Form.Control onChange={this.onBuildingChange} as=\"select\">\n                                    <option>Clough Undergraduate Learning Commons</option>\n                                    <option>College of Computing</option>\n                                    <option>Instructional Center</option>\n                                </Form.Control>\n                            </Form.Group>\n                        </Col>\n                        <Col>\n                            <Form.Group controlId=\"exampleForm.ControlSelect1\">\n                                <Form.Label className=\"label1\">Select Room: *</Form.Label>\n                                <Form.Control onChange={this.onRoomChange} as=\"select\">\n                                    <option>101</option>\n                                    <option>220</option>\n                                    <option>305</option>\n                                    <option>332</option>\n                                </Form.Control>\n                            </Form.Group>\n                        </Col>\n                    </Form.Row>\n                    <Form.Row>\n                        <Col>\n                            <Form.Group controlId=\"formBasicPassword\">\n                                <Form.Label className=\"label1\">Number of Rows: *</Form.Label>\n                                <Form.Control onChange={this.onRowsChange} value={this.state.length} type=\"text\" placeholder=\"10\" />\n                            </Form.Group>\n                        </Col>\n                        <Col>\n                            <Form.Group controlId=\"formBasicPassword\">\n                                <Form.Label className=\"label1\">Number of Seats: *</Form.Label>\n                                <Form.Control onChange={this.onColsChange} value={this.state.breadth} type=\"text\" placeholder=\"20\" />\n                            </Form.Group>\n                        </Col>\n                    </Form.Row>\n                </Form>\n                <Button onClick={this.addClass} className=\"signup-btn\">\n                    Add Class\n                </Button>\n            </Container>\n            </div>\n        )\n    }\n}\n\nexport default CreateClass;",["36","37"],"/Users/devanshjatinponda/Desktop/Projects/GTEM-Hackathon/frontend/src/components/Login.js",["38"],"/Users/devanshjatinponda/Desktop/Projects/GTEM-Hackathon/frontend/src/components/DashboardStudent.js",["39","40","41"],{"ruleId":"42","severity":1,"message":"43","line":1,"column":8,"nodeType":"44","messageId":"45","endLine":1,"endColumn":12},{"ruleId":"42","severity":1,"message":"46","line":12,"column":8,"nodeType":"44","messageId":"45","endLine":12,"endColumn":18},{"ruleId":"42","severity":1,"message":"47","line":34,"column":11,"nodeType":"44","messageId":"45","endLine":34,"endColumn":19},{"ruleId":"48","severity":1,"message":"49","line":105,"column":21,"nodeType":"50","endLine":105,"endColumn":45},{"ruleId":"42","severity":1,"message":"51","line":2,"column":27,"nodeType":"44","messageId":"45","endLine":2,"endColumn":30},{"ruleId":"48","severity":1,"message":"49","line":156,"column":21,"nodeType":"50","endLine":156,"endColumn":45},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"42","severity":1,"message":"56","line":24,"column":13,"nodeType":"44","messageId":"45","endLine":24,"endColumn":17},{"ruleId":"57","severity":1,"message":"58","line":7,"column":5,"nodeType":"59","messageId":"60","endLine":9,"endColumn":6},{"ruleId":"48","severity":1,"message":"49","line":38,"column":26,"nodeType":"50","endLine":38,"endColumn":60},{"ruleId":"48","severity":1,"message":"49","line":54,"column":33,"nodeType":"50","endLine":54,"endColumn":57},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'SignUpProf' is defined but never used.","'userInfo' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Row' is defined but never used.","no-native-reassign",["61"],"no-negated-in-lhs",["62"],"'body' is assigned a value but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-global-assign","no-unsafe-negation"]